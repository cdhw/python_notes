#!/usr/bin/python
# -*- coding: utf-8 -*-
# @author:zhangshiqiang
# @contact: zsqq007@163.com
# @file: zsq_80_进程vs线程的分析
# @time: 2018/3/27 10:55
"""
1、多进程和多线程是实现 多任务 最常用的两种方式
Master-Worker模式可以实现 多任务
Master分配任务
Worker执行任务
多任务 环境 下，一般是一个Master，多个Worker
A、如果通过多进程实现Master-Worker模式 进而实现多任务，主进程就是Master
其他进程就是Worker
B、如果通过多线程实现Master-Worker模式 进而实现多任务，主线程就是Master
其他线程就是Worker
多进程模式的优点：
    稳定性高，因为进程之间是独立的，一个子进程被干掉了，是不会影响
主进程和其他子进程的运行的，但是如果说主进程被干掉了，那么所有进程也就
结束了，Apache服务器就是采用的多进程模式
多进程模式的缺点：
    创建进程cpu资源开销大，在linux/unix系统下，调用fork函数创建子进程的cpu
开销较小,windows系统下应为要用到python的模块创建子进程，所以cpu开销巨大
操作系统能同时运行的进程数是有限的，在运行内存和cpu的局限性下，上千的进程
可能导致系统瘫痪
多线程的速度通常快于多进程，但是不是非常明显
多线程最致命的缺点：
   一个线程挂掉可能导致整个进程奔溃
   在windows系统下，如果一个线程出了问题，windows会直接结束整个进程
在windows系统下多线程的效率要比多进程高很多，但是多线程往往不太稳定
2、线程的切换
    无论是多线程还是多进程，数量一起来之后，效率肯定会减慢
单核cpu执行多任务的流程：
    如果cpu是执行完一个线程之后再执行下一个线程，以此类推，这种模式叫做
单任务模式，效率非常低下。
     但是如果说cpu是执行A线程的一部分任务之后又切换到B线程去执行一部分任务，
又切换到C线程执行一部分任务，以此类推，cpu的这种模式叫做多任务模式，效率较高
但是切换任务是非常耗费cpu资源的，当任务数达到一定量，可能cpu连切换任务都忙不过来






"""