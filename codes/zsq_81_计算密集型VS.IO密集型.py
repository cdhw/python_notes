#!/usr/bin/python
# -*- coding: utf-8 -*-
# @author:zhangshiqiang
# @contact: zsqq007@163.com
# @file: zsq_81_计算密集型VS.IO密集型
# @time: 2018/3/27 11:30
"""
任务的类型分为计算密集型和IO密集型
根据任务类型的不同我们考虑是否需要采用多任务的模式
A、计算密集型：
    计算密集型需要进行大量的计算，非常消耗cpu资源，所以不宜过多地进行进程
切换，所以计算密集型任务数最好等于cpu核数。
    计算密集型主要消耗cpu资源，所以程序的执行速度一定要快，python是高级编程语言
执行速度很慢，所以对于计算密集型的程序部分，最好采用c语言来写
B、IO密集型：
    涉及到磁盘、网络的任务都是IO密集型任务，这类任务的特点是cpu资源消耗较少
    任务的大部分时间都是在等待IO(数据读写)的完成，这是因为IO的速度是远远低于cpu
的执行速度和运行内存的读取速度，对于IO密集型任务，任务越多，cpu效率越高，因为
可以充分让cpu干活，而不是处于等待状态，对于IO密集型语言用c语言来提升运行效率的
效果几乎为0，因为整个程序的执行几乎都是在等待IO。针对IO密集型任务，采用开发
效率高，代码量少的python，是明智之举。
C 异步IO
    异步IO就是利用单进程单线程模式来执行多任务。在cpu等待IO的时候，让cpu去干其他的事，所以在IO密集型任务下，
采用单线程和单进程模式是非常不可取的，所以现代操作系统针对采用异步IO来实现
在单进程，单线程模式来执行多任务。
多进程虽好，但是进程的切换时需要耗费cpu资源的，再加上操作系统总的进程数量
是有限的，调度成了问题，所以采用异步IO模型来实现多任务是一个趋势
D 什么是单进程单线程
    就是cpu要把当前进程或者线程的整个程序执行完毕之后再执行下一个进程或者线程
"""